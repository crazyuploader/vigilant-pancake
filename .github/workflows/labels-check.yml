name: Validate MDX Metadata

on:
  pull_request:
    paths:
      - 'data/docs/**.mdx'

# Prevent multiple workflow runs for same PR
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number }}
  cancel-in-progress: true

permissions:
  contents: read
  pull-requests: write

jobs:
  validate-mdx:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get changed MDX files
        id: changed-files
        uses: tj-actions/changed-files@v46
        with:
          files: |
            **.mdx

      - name: Validate MDX metadata
        if: steps.changed-files.outputs.any_changed == 'true'
        id: validate
        run: |
          echo "Checking MDX files for required metadata..."
          
          INVALID_FILES=""
          EXIT_CODE=0
          
          for file in ${{ steps.changed-files.outputs.all_changed_files }}; do
            echo "Checking: $file"
            
            # Extract frontmatter more reliably (only between first two --- markers)
            FRONTMATTER=$(awk '/^---$/{if(++count==2) exit} count==1 && !/^---$/' "$file")
            
            ERRORS=""
            
            # Check for tags field and validate it's an array
            if ! echo "$FRONTMATTER" | grep -q "^tags:"; then
              ERRORS="${ERRORS}missing tags; "
            elif echo "$FRONTMATTER" | grep "^tags:" | grep -qv "\["; then
              ERRORS="${ERRORS}tags must be an array; "
            fi
            
            # Check for date field and validate format (YYYY-MM-DD)
            if ! echo "$FRONTMATTER" | grep -q "^date:"; then
              ERRORS="${ERRORS}missing date; "
            elif ! echo "$FRONTMATTER" | grep "^date:" | grep -qE "[0-9]{4}-[0-9]{2}-[0-9]{2}"; then
              ERRORS="${ERRORS}invalid date format (use YYYY-MM-DD); "
            fi
            
            if [ -n "$ERRORS" ]; then
              echo "❌ $file: $ERRORS"
              INVALID_FILES="$INVALID_FILES\n- $file (${ERRORS%, })"
              EXIT_CODE=1
            else
              echo "✅ $file has valid metadata"
            fi
          done
          
          if [ $EXIT_CODE -eq 1 ]; then
            echo "validation_failed=true" >> $GITHUB_OUTPUT
            echo "invalid_files<<EOF" >> $GITHUB_OUTPUT
            echo -e "$INVALID_FILES" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
            exit 1
          else
            echo "validation_failed=false" >> $GITHUB_OUTPUT
          fi

      - name: Add blocking label
        if: failure() && steps.validate.outputs.validation_failed == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              labels: ['mdx-metadata-missing']
            });

      - name: Comment on PR
        if: failure() && steps.validate.outputs.validation_failed == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const invalidFiles = `${{ steps.validate.outputs.invalid_files }}`;
            
            // Check if comment already exists
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.data.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('## Docs Metadata validation failed')
            );
            
            // Parse invalid files and create clickable links
            const fileLines = invalidFiles.trim().split('\n').filter(line => line.trim());
            const linkedFiles = fileLines.map(line => {
              const match = line.match(/- (.+?) \((.+)\)/);
              if (match) {
                const [, filePath, reason] = match;
                const fileUrl = `https://github.com/${context.repo.owner}/${context.repo.repo}/blob/${context.payload.pull_request.head.sha}/${filePath}`;
                return `- [${filePath}](${fileUrl}) (${reason})`;
              }
              return line;
            }).join('\n');
            
            // Get current date in YYYY-MM-DD format
            const currentDate = new Date().toISOString().split('T')[0];
            
            const body = `## Docs Metadata validation failed
            
            The following MDX files are missing required metadata fields:
            ${linkedFiles}
            
            **Required fields:**
            - \`tags: []\` - An array of tags (e.g., \`["SigNoz Cloud", "Self-Host"]\`)
            - \`date:\` - Date in YYYY-MM-DD format (e.g., \`${currentDate}\`)
            
            **Example frontmatter:**
            \`\`\`yaml
            ---
            title: My Post
            date: ${currentDate}
            tags: ["SigNoz Cloud", "Self-Host"]
            ---
            \`\`\`
            
            Please add the missing metadata fields to proceed.`;
            
            if (botComment) {
              // Update existing comment instead of creating duplicate
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }

      - name: Remove label if validation passes
        if: success() && steps.changed-files.outputs.any_changed == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            try {
              await github.rest.issues.removeLabel({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                name: 'mdx-metadata-missing'
              });
            } catch (error) {
              // Label might not exist, that's okay
              console.log('Label does not exist or already removed');
            }

      - name: Generate summary
        if: always() && steps.changed-files.outputs.any_changed == 'true'
        run: |
          if [ "${{ steps.validate.outputs.validation_failed }}" == "true" ]; then
            echo "## ❌ Validation Failed" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "The following files have metadata issues:" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo -e "${{ steps.validate.outputs.invalid_files }}" >> $GITHUB_STEP_SUMMARY
          else
            echo "## ✅ All MDX Files Valid" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "All changed MDX files have the required metadata fields." >> $GITHUB_STEP_SUMMARY
          fi
